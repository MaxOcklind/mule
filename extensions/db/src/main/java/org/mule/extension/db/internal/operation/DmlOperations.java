/*
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package org.mule.extension.db.internal.operation;

import org.mule.extension.db.api.StatementStreamingResultSetCloser;
import org.mule.extension.db.api.param.QueryDefinition;
import org.mule.extension.db.internal.domain.connection.DbConnection;
import org.mule.extension.db.internal.domain.executor.SelectExecutor;
import org.mule.extension.db.internal.domain.query.Query;
import org.mule.extension.db.internal.domain.statement.QueryStatementFactory;
import org.mule.extension.db.internal.metadata.DeletemeMetadataResolver;
import org.mule.extension.db.internal.parser.QueryTemplateParser;
import org.mule.extension.db.internal.parser.SimpleQueryTemplateParser;
import org.mule.extension.db.internal.result.resultset.IteratorResultSetHandler;
import org.mule.extension.db.internal.result.resultset.ListResultSetHandler;
import org.mule.extension.db.internal.result.resultset.ResultSetHandler;
import org.mule.extension.db.internal.result.row.InsensitiveMapRowHandler;
import org.mule.runtime.core.util.StringUtils;
import org.mule.runtime.extension.api.annotation.ParameterGroup;
import org.mule.runtime.extension.api.annotation.metadata.MetadataScope;
import org.mule.runtime.extension.api.annotation.param.Connection;
import org.mule.runtime.extension.api.annotation.param.Optional;
import org.mule.runtime.extension.api.annotation.param.display.Text;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import javax.inject.Inject;

public class DmlOperations
{
    @Inject
    private StatementStreamingResultSetCloser resultSetCloser;

    private QueryTemplateParser queryParser = new SimpleQueryTemplateParser();

    /**
     * Selects data from a database
     */
    //TODO: MetadataResolver needed to change to Iterator<Map> in case streaming is enabled.
    public Object select(QueryDefinition query,
                                            @Optional(defaultValue = "false") boolean streaming,
                                            @Optional(defaultValue = "10") int fetchSize,
                                            @Optional Integer maxRows,
                                            @ParameterGroup QuerySettings settings,
                                            @Connection DbConnection connection) throws SQLException
    {
        QueryStatementFactory statementFactory = getStatementFactory(fetchSize, maxRows, settings);

        InsensitiveMapRowHandler recordHandler = new InsensitiveMapRowHandler();
        ResultSetHandler resultSetHandler = streaming ? new IteratorResultSetHandler(recordHandler, resultSetCloser) : new ListResultSetHandler(recordHandler);

        return new SelectExecutor(statementFactory, resultSetHandler).execute(connection, buildQuery(query, settings));
    }

    private QueryStatementFactory getStatementFactory(Integer fetchSize, @Optional Integer maxRows, @ParameterGroup QuerySettings settings)
    {
        QueryStatementFactory statementFactory = new QueryStatementFactory();
        if (maxRows != null)
        {
            statementFactory.setMaxRows(maxRows);
        }

        if (fetchSize != null)
        {
            statementFactory.setFetchSize(fetchSize);
        }

        statementFactory.setQueryTimeout(new Long(settings.getQueryTimeoutUnit().toSeconds(settings.getQueryTimeout())).intValue());
        return statementFactory;
    }

    /**
     * Inserts data into a database.
     *
     * @param queryDefinition
     * @param autoGeneratedKeyAttributes
     * @param bulkMode                   Indicates whether or not a bulk update is requested. When true, payload is required to be a
     *                                   collection and a bulk update executes for each item in the collection.
     */
    public int insert(QueryDefinition queryDefinition,
                      @ParameterGroup AutoGeneratedKeyAttributes autoGeneratedKeyAttributes,
                      @Optional(defaultValue = "false") boolean bulkMode,
                      @ParameterGroup QuerySettings settings)
    {
        return 0;
    }

    /**
     * Updates data in a database.
     *
     * @param queryDefinition
     * @param bulkMode        Indicates whether or not a bulk update is requested. When true, payload is required to be a
     *                        collection and a bulk update executes for each item in the collection.
     */
    public int update(QueryDefinition queryDefinition, @Optional(defaultValue = "false") boolean bulkMode, @ParameterGroup QuerySettings settings)
    {
        return 0;
    }

    /**
     * Deletes data in a database.
     *
     * @param queryDefinition
     * @param bulkMode        Indicates whether or not a bulk update is requested. When true, payload is required to be a
     *                        collection and a bulk update executes for each item in the collection.
     */
    public int delete(QueryDefinition queryDefinition, @Optional(defaultValue = "false") boolean bulkMode, @ParameterGroup QuerySettings settings)
    {
        return 0;
    }

    /**
     * @param queryDefinition
     * @param streaming                  Indicates if result sets must be returned as an iterator or as list of maps.
     * @param fetchSize                  Indicates how many rows to fetch from the database when rows are read from a resultSet.
     *                                   This property is required when streaming is {@code true}; in that case a default value (10) is used.
     * @param maxRows                    Sets the limit for the maximum number of rows that any ResultSet object generated by this
     *                                   message processor can contain for the given number. If the limit is exceeded, the excess rows
     *                                   are silently dropped.
     * @param autoGeneratedKeyAttributes
     * @param settings
     * @return
     */
    @MetadataScope(outputResolver = DeletemeMetadataResolver.class)
    public Map<String, Object> storedProcedure(QueryDefinition queryDefinition,
                                               @Optional(defaultValue = "false") boolean streaming,
                                               @Optional(defaultValue = "10") int fetchSize,
                                               @Optional Integer maxRows,
                                               @ParameterGroup AutoGeneratedKeyAttributes autoGeneratedKeyAttributes,
                                               @ParameterGroup QuerySettings settings)
    {
        return new HashMap<>();
    }

    /**
     * Updates data in a database.
     *
     * @param dynamicQuery
     * @param file         The location of a file to load. The file can point to a resource on the classpath or on a disk.
     *                     This parameter is mutually exclusive with {@code sql}
     * @param settings
     * @return
     */
    public int bulkUpdate(@Optional @Text String dynamicQuery, @Optional String file, @ParameterGroup QuerySettings settings)
    {
        //return new int[] {0};
        return 0;
    }

    private Query buildQuery(QueryDefinition definition, QuerySettings settings) {
        final QueryDefinition template = settings.getQueryTemplate();
        if (template != null) {
            if (StringUtils.isBlank(definition.getSql())) {
                definition.setSql(template.getSql());
            }

            definition.addParameters(template.getParameters());
        }

        return new Query(definition, queryParser.getStatementType(definition.getSql()));
    }
}
